#!/usr/bin/env python3 tt

__author__ = "Mike Bond"
__copyright__ = "Copyright (c) 2019"
__license__ = "MIT"
__originalDate__ = "20190617"
__modifiedDate__ = "20200812"
__version__ = "0.0.5"
__maintainer__ = "Mike Bond"
__status__ = "Beta"

"""
A Python3 script that uses a Nmap Module to perform the following scans
    Discovery Scans
    TCP/UDP Scan of discovered IP Addresses
    UDP Scan Top 100 Ports of discovered IP Addresses
    TCP Scan (all ports) of discovered IP Addresses
"""

"""Import modules"""
import argparse
import nmap
import os
import sys

"""Define Color Status"""
error = '\033[1m\033[31m[!]\033[0m'
warning = '\033[1m\033[33m[-]\033[0m'
info = '\033[1m\033[94m[*]\033[0m'
complete = '\033[1m\033[92m[+]\033[0m'

""" Functions """
def dir_folder(output_file, network_ip):
    """
    A function that creates the folder structure based on ArgParse 'network_ip' and 'output_file' flag and returns the
    'directory' object
    :param: output_file
    :param: network_ip
    :return: directory
    """
    print("{0} Determining Directory Structure".format(info))
    # Create the directory based on "-o" option.  If no input detected, structure created in working directory and
    # return the object 'directory',
    if output_file == None:
        directory = ("{0}/".format(network_ip))
    else:
        directory = ("{0}/{1}/".format(output_file, network_ip))

    try:
        os.mkdir(directory)
        print("{0} Directory {1} created ".format(complete, directory))
    except FileExistsError:
        print("{0} Directory {1} already exists".format(warning, directory))

    return directory


def discovery(nm, network_ip, cidr, directory):
    """
    The 'discovery' function performs scans to determine live IP Address.  Once discovered, the IP Address
    are saved to the LiveHosts file and then sorted and duplicates removed.
    :param: nm
    :param: network_ip
    :param: cidr
    :param: directory
    :return:
    """
    print("{0} Performing Host Discovery".format(info))
    network = ("{0}/{1}".format(network_ip, cidr))
    nm.scan(hosts=network, arguments='-sn -n -oG {0}NmapFastScan.gnmap'.format(directory))
    os.system("cat {0}NmapFastScan.gnmap | grep 'Up'  | cut -d \" \" -f2 > {0}LiveHosts".format(directory))

    nm.scan(hosts=network, arguments='-Pn -n -p21,22,23,80,139,443,445 -oG {0}NmapPnScan.gnmap'.format(directory))
    os.system("cat {0}NmapPnScan.gnmap | grep 'open' | cut -d \" \" -f2 >> {0}LiveHosts && sort -u {0}"
              "LiveHosts -o {0}LiveHosts".format(directory))


def tcp_udp(nm, directory):
    """
    The 'tcp_udp' function performs a port scan of all TCP ports and the top 20 UDP ports based on the LiveHosts file.
    The output of the scan is saved as nmap formatting as well as xml formatting.
    :param: nm
    :param: directory
    :return:
    """
    print("{0} Performing TCP/UDP Scan for Reporting".format(info))
    nm.scan(
        arguments="-iL {0}LiveHosts -Pn -sSUV -p U:53,67,68,69,123,135,137,138,139,161,162,445,500,514,520,631,1434,1900,4500,18999,49152,T:1-65535 --reason --max-retries 2 --open -oN {0}NmapTcpUdpScan.nmap".format(
            directory))
    x_out = (nm.get_nmap_last_output())
    with open(directory + 'NmapTcpUdpScan.xml', 'w') as x_xml:
        print(x_out, file=x_xml)


def udp(nm, directory):
    """
    The 'udp' function performs a port scan of the top 100 UDP ports based on the LiveHosts file.
    The output of the scan is saved as nmap formatting.
    :param: nm
    :param: directory
    :return:
    """
    print("{0} Performing UDP Top 100 Scan".format(info))
    nm.scan(
        arguments="-iL {0}LiveHosts -n -sUV --top-ports 100 --defeat-icmp-ratelimit --open -oN {0}NmapUdpScan.nmap".format(
            directory))


def tcp(nm, directory):
    """
    The 'tcp' function performs an intensive port scan of all TCP ports based on the LiveHosts file.
    The output of the scan is saved as nmap formatting.
    :param: nm
    :param: directory
    :return:
    """
    print("{0} Performing TCP Scan on all ports".format(info))
    # nm.scan(arguments='-iL '+dl+'LiveHosts -n -sSVC -O -p- -T4 --max-retries 2 -oN '+dl+'NmapTcpScan.nmap')
    nm.scan(
        arguments="-iL {0}LiveHosts -Pn -n -sSVC -O -p- --script-timeout 5m --min-parallelism 100 -max-rtt-timeout 15 --reason --open -oN {0}NmapTcpScan.nmap".format(
            directory))


def main():
    """
    The main function that calls the scanning functions based on args.type selection
    :param:
    :return:
    """
    if not os.geteuid() == 0:
        print("{0} AutoScan must be run as root.".format(error))
        sys.exit(-1)

    if args.type:
        # If the ArgParse -s 'scan' option of 1-4 is selected, process functions; print error if incorrect option
        if args.type == "1" or args.type == "2" or args.type == "3" or args.type == "4":
            # Call the 'dir_folder', as directory, and pass the ArgParse flag of -o
            directory = dir_folder(args.output_dir, args.network_ip)
            # Define variable for Nmap PortScanner
            nm = nmap.PortScanner()
            if args.type == "1":
                # Call the 'discovery' function and pass the objects of 'nm', 'directory' and the the ArgParse
                # -i 'network_ip' and -c 'cidr'
                discovery(nm, args.network_ip, args.cidr, directory)
            if args.type == "2":
                # Call the 'discovery' function and pass the objects of 'nm', 'directory' and the the ArgParse
                # -i 'network_ip' and -c 'cidr'
                discovery(nm, args.network_ip, args.cidr, directory)
                # Call the 'tcp_udp' function and pass 'nm' and 'directory' objects
                tcp_udp(nm, directory)
            if args.type == "3":
                # Call the 'discovery' function and pass the objects of 'nm', 'directory' and the the ArgParse
                # -i 'network_ip' and -c 'cidr'
                discovery(nm, args.network_ip, args.cidr, directory)
                # Call the 'udp' function and pass 'nm' and 'directory' objects
                udp(nm, directory)
            if args.type == "4":
                # Call the 'discovery' function and pass the objects of 'nm', 'directory' and the the ArgParse
                # -i 'network_ip' and -c 'cidr'
                discovery(nm, args.network_ip, args.cidr, directory)
                # Call the 'tcp' function and pass 'nm' and 'directory' objects
                tcp(nm, directory)
            print("{0} All Scanning Complete".format(complete))
            return
        else:
            print("{0} Scan Type Option must be between 1 and 4\n".format(error))
            sys.exit(-1)


if __name__ == "__main__":
    # Use ArgParse with mandatory flag of -i, -c, -t
    try:
        parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                         description='Automated Nmap Scanning')
        required = parser.add_argument_group('required arguments')
        required.add_argument("-i", "--ip", type=str, help="Network IP to use: -i 192.168.1.0",
                              dest="network_ip", required=True)
        required.add_argument("-c", "--cidr", type=str, help="Subnet CIDR to use: -c 24 ", dest="cidr", required=True)
        required.add_argument("-t {1,2,3,4}", "--type",
                              help="Choose one of the following:\n1 = Discovery\n"
                                   "2 = Discovery and TCP/UDP with Reporting\n3 = Discovery and Full UDP\n"
                                   "4 = Discovery and Full TCP",
                              default="1")
        parser.add_argument('-o', '--output', help='Output Directory location ', dest='output_dir', default=None)
        args = parser.parse_args()

        # Call the 'main' function
        main()

    except KeyboardInterrupt:
        print('{0} User Interrupt! Quitting....\n'.format(error))
        sys.exit(-1)

    exit()
