#!/usr/bin/env python3 -tt

__author__ = "Mike Bond"
__copyright__ = "Copyright (c) 2019"
__license__ = "MIT"
__originalDate__ = "20190725"
__modifiedDate__ = "20200731"
__version__ = "0.0.2"
__maintainer__ = "Mike Bond"
__status__ = "Beta"

"""
This script is used to download a Cisco Switch configuration file via SNMP R/W to a TFTP server.
"""

"""Import modules"""
import os
import sys
import random
import argparse

"""Define Color Status"""
error = '\033[1m\033[31m[!]\033[0m'
warning = '\033[1m\033[33m[-]\033[0m'
info = '\033[1m\033[94m[*]\033[0m'
complete = '\033[1m\033[92m[+]\033[0m'

""" Functions """
def snmp():
    """
    The snmp function executes the snmpset application with Cisco MIBs.
    In addition, it generates a random number as part of the required elements within the string.
    :param:
    :return:
    """
    try:
        random_number = str(random.randint(100, 999))
        command = 'snmpset -v 2c -c ' + args.community + ' ' + args.target
        ccCopyProtocol = '.1.3.6.1.4.1.9.9.96.1.1.1.1.2.' + random_number + ' i 1'
        ccCopySourceFileType = '.1.3.6.1.4.1.9.9.96.1.1.1.1.3.' + random_number + ' i 4'
        ccCopyDestFileType = '.1.3.6.1.4.1.9.9.96.1.1.1.1.4.' + random_number + ' i 1'
        ccCopyServerAddress = '.1.3.6.1.4.1.9.9.96.1.1.1.1.5.' + random_number + ' a ' + args.source
        ccCopyFileName = '.1.3.6.1.4.1.9.9.96.1.1.1.1.6.' + random_number + ' s ' + args.target + '-config.txt'
        ccCopyEntryRowStatus = '.1.3.6.1.4.1.9.9.96.1.1.1.1.14.' + random_number + ' i 4'
        dev_null = '>/dev/null 2>&1'
        session = '{0} {1} {2} {3} {4} {5} {6} {7}'.format(command, ccCopyProtocol, ccCopySourceFileType,
                                                           ccCopyDestFileType, ccCopyServerAddress, ccCopyFileName,
                                                           ccCopyEntryRowStatus, dev_null)
        os.system(session)
        print("{0} Execution Successful".format(complete))
        print("{0} Check TFTP Server {1} to validate that {2}-config.txt was downloaded\n" \
              .format(info, args.source, args.target))

    except Exception as e:
        print("{0} {1}".format(error, e))

    return

if __name__ == '__main__':
    # Use ArgParse with mandatory flag of -t, -s, and -c
    try:
        parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, \
                                         description="Download a Cisco Switch Configuration via SNMP R/W to a TFTP Server")
        required = parser.add_argument_group("required arguments")
        required.add_argument("-t", "--target", type=str, help="Cisco Device IP Address ", \
                              dest="target", required=True)
        required.add_argument("-s", "--source", type=str, help="TFTP Server IP Address ", \
                              dest="source", required=True)
        required.add_argument("-c", "--community", type=str, help="SNMP R/W Community String ", \
                              dest="community", required=True)
        args = parser.parse_args()

        # Call the 'snmp' function
        snmp()

    except KeyboardInterrupt:
        print("{0} User Interrupt! Quitting....\n".format(error))
        sys.exit(-1)
    except:
        raise
    exit()
