#!/usr/bin/env python3 -tt

"""Meta Data"""
__author__ = "Mike Bond"
__license__ = "MIT"
__originalDate__ = "20200503"
__modifiedDate__ = "20190503"
__version__ = "0.0.1"
__maintainer__ = "Mike Bond"
__status__ = "Beta"

"""
This script parses the output of https://github.com/clr2of8/GatherContacts into a text file based on the
'domain' and 'email' flags.
"""

"""Import modules"""
import argparse
import os
import sys
import csv

"""Define Color Status"""
error = '\033[1m\033[31m[!]\033[0m'
warning = '\033[1m\033[33m[-]\033[0m'
info = '\033[1m\033[94m[*]\033[0m'
complete = '\033[1m\033[92m[+]\033[0m'

"""Functions"""
def parse_file(file_name):
    """
    A Function that opens and parses a file 'file_name'; then returns an object named 'contacts'.
    :param: file_name
    :return: contacts
    """
    contacts = []
    with open( file_name, 'r' ) as csv_file:
        csv_dict_reader = csv.DictReader(csv_file,delimiter='\t')
        column_names = csv_dict_reader.fieldnames
        # Find the header containing key word of 'source'.
        if column_names[0] != 'source':
            print (error+' Incorrect Input File Format\n')
            sys.exit(-1)
        else:
            for line in csv_dict_reader:
                last_name = line['Name 2']
                first_name = line['Name 1']
                contacts.append({'last_name':last_name,'first_name':first_name})

    return contacts

def dir_folder(output_file):
    """
    A function that creates the folder structure based on ArgParse 'output_file' flag and returns the
    'directory' object
    :param: output_file
    :return: directory
    """
    print (info+' Determining Directory Structure')
    # Create the directory based on "-o" option.  If no input detected, structure created in working directory and
    # return the object 'directory',
    if output_file == None:
        directory=('EmailData/')
    else:
        directory=(output_file)

    try:
        os.mkdir(directory)
        print(complete+' Directory "{}" created '.format(directory))
    except FileExistsError:
        print(warning+' Directory "{}" already exists'.format(directory))

    return directory

def print_names(contacts,domain,opt,directory):
    """
    A Function that iterates a dictionary 'contacts' and saves an email address based on ArgParse 'domain' and
    'email' flags to a file within a directory based on the ArgParse 'out_put' flag.
    :param: contacts
    :param: domain
    :param: opt
    :param: directory
    :return:
    """
    for value in contacts:
        if opt == '1':
            file = open(directory+'firstlast.txt','a+')
            file.write(value['first_name']+'.'+value['last_name']+'@'+domain+'\n')
            file.close()
        elif opt == '2':
            file = open(directory+'lastfirst.txt','a+')
            file.write(value['last_name']+'.'+value['first_name']+'@'+domain+'\n')
            file.close()
        elif opt == '3':
            file = open(directory+'firstinitial_last.txt','a+')
            file.write(value['first_name'][0]+value['last_name']+'@'+domain+'\n')
            file.close()
        elif opt == '4':
            file = open(directory+'lastinitial_first.txt','a+')
            file.write(value['last_name'][0]+value['first_name']+'@'+domain+'\n')
            file.close()
    return

def main():
    """
    The main function that calls functions to open a text file, parse data, manipulate data, and saves the output to a
    file named 'EmailData.txt' to the current working directory or
    specified directory.
    :param:
    :return:
    """

    if args.input_file:
        # If the ArgParse -e 'email' option of 1-4 is selected, process functions; print error if incorrect option
        if args.email is '1' or args.email is '2' or args.email is '3' or args.email is '4':
            # Call the 'parse_file' function, as 'contacts', and pass the ArgParse -i 'input_file' object
            contacts = parse_file(args.input_file.name)
            # Call the 'dir_folder', as directory, and pass the ArgParse flag of -o
            directory = dir_folder(args.output_dir)
            # Call the 'print_names' function and pass the 'contacts' object, the ArgParse -d 'domain', and the
            # ArgParse -e 'email' options.
            print_names(contacts,args.domain_name,args.email,directory)
            print (complete+' Document Parsing Complete\n')
            return
        else:
            print (error+' Email Option must be between 1 and 4\n')
            sys.exit(-1)

if __name__ == '__main__':
    # Use ArgParse with mandatory flag of -i, -d, -e
    try:
        parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,\
                                         description='Parse Burp Suite Pro Extension of GatherContacts.jar output file')
        required = parser.add_argument_group('required arguments')
        required.add_argument('-i','--input', type=argparse.FileType('r'), help="Input file to use ", \
                              dest="input_file", required=True)
        required.add_argument('-d','--domain', help='Domain name to use: something.com', dest='domain_name', \
                              required=True)
        required.add_argument('-e {1,2,3,4}','--email',\
                              help='Email Format:\n1 = [First Name].[Last Name]\n'
                                   '2 = [Last Name].[First Name]\n3 = [First Inital][Last Name]\n'
                                   '4 = [First Name][LastInitial]',\
                              default='1')
        parser.add_argument('-o','--output', help='Output Directory location ', dest='output_dir', default=None)
        args = parser.parse_args()

        # Call the 'main' function
        main()

    except KeyboardInterrupt:
        print (error+'User Interrupt! Quitting....\n')
        sys.exit(-1)
    except:
        raise
    exit()
