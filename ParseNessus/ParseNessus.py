#!/usr/bin/env python3 tt

__author__ = "Mike Bond"
__copyright__ = "Copyright (c) 2020"
__license__ = "MIT"
__originalDate__ = "20200731"
__modifiedDate__ = "20190827"
__version__ = "0.0.2"
__maintainer__ = "Mike Bond"
__status__ = "Beta"

"""
This script parses a Nessus file and saves the output to an Excel Spreadsheet named 'Data.xlsx'.
The scripting was created utilizing 'NessusClientData_v2' XML formatting.
"""

"""Import modules"""
import argparse
import os
import sys
import xml.etree.ElementTree as ET
import re
import xlsxwriter

"""Define Color Status"""
error = '\033[1m\033[31m[!]\033[0m'
warning = '\033[1m\033[33m[-]\033[0m'
info = '\033[1m\033[94m[*]\033[0m'
complete = '\033[1m\033[92m[+]\033[0m'

""" Functions """
def parse_file(file_name):
    """
    A Function that validates a Nessus XML file and returns parsed data in an object named 'nessus_xml', if found.
    :param: file_name
    :return: nessus_xml
    """

    try:
        xml_file = open(file_name, "r")
        nessus_xml = ET.parse(xml_file).getroot()
        if nessus_xml.tag == "NessusClientData_v2":
            return nessus_xml
    except ET.ParseError as e:
        print ("{0} Unable to find the 'NessusClientData_v2' XML tag!".format(error))
        sys.exit(-1)

def get_report_items(nessus_xml):
    """
    A Function that creates lists from the parsed data 'nessus_xml' and returns an object named 'report_items'.
    :param: nessus_xml
    :return: report_items
    """

    # Create lists that will be used to sort data by 'risk_factor'
    report_items = []
    critRiskLst = []
    highRiskLst = []
    medRiskLst = []
    lowRiskLst = []

    # Iterate 'ReportHost' tag define variable in order to add keys/values to a list
    for host in nessus_xml.findall("Report/ReportHost"):
        ipaddr = host.find("HostProperties/tag/[@name='host-ip']").text
        if host.find("HostProperties/tag/[@name='system-type']") != None:
            type = host.find("HostProperties/tag/[@name='system-type']").text
        else:
            type = "Unknown"
        if host.find("HostProperties/tag/[@name='netbios-name']") != None:
            nbns = host.find("HostProperties/tag/[@name='netbios-name']").text
        else:
            nbns = ""
        if host.find("HostProperties/tag/[@name='system-type']") != None:
            os = host.find("HostProperties/tag/[@name='operating-system']").text
        else:
            os = "Unknown"

        # Iterate 'ReportItem' tag define variable in order to add keys/values to a list
        for item in host.findall("ReportItem"):
            risk_factor = item.find("risk_factor").text
            if risk_factor != "None":
                plugin_id = item.get("pluginID")
                plugin_name = item.get("pluginName")
                port = item.get("port")
                protocol = item.get("protocol")
                description = item.find("description").text
                synopsis = item.find("synopsis").text
                solution = item.find("solution").text

                # Create a FQDN from Certificate CN Name that ends with '.' and from 2 to 5 characters
                if item.find("plugin_output") != None:
                    plugin_output = item.find("plugin_output").text
                    fqdn = re.search("CN=.*(\.[a-zA-Z]{2,5})$", plugin_output) # Find data that starts with CN=
                    if fqdn != None:
                        fqdn = fqdn.group()
                        fqdn = fqdn[3:]                                 # Strip the first 3 characters
                else:
                    fqdn = ""
                # Iterate through 'see_also' and combine multiple entries per host
                see_list = []
                if item.find("see_also") != None:
                    for see_also1 in item.findall("see_also"):
                        see_also1 = see_also1.text                          # Convert object to a string
                        see_list.append(see_also1.splitlines())             # Append string to a list
                    see_also2 = ", ".join([str(elem) for elem in see_list]) # Convert list to string and separate
                    see_also2 = (str(see_also2)[1:-1])                      # Strip the front and back brackets
                else:
                    see_also2 = ""
                see_list = []                                               # Empty list contents

                # Combine multiple CVE's entries within 'cve_list1' per host
                cve_list1 = []
                cve_list2 = []
                if item.find("cve") != None:
                    for cve in item.findall("cve"):
                        cve_list1.append(cve.text)
                    # Add a comma to separate the elements within the 'cve_list1' to the 'cve_list2'
                    cves = ", ".join([str(elem) for elem in cve_list1])
                    cve_list2.append(cves)

                # Define 'risks' based on key values
                risks = {"plugin_id": plugin_id, "plugin_name": plugin_name, "risk_factor": risk_factor,
                         "description": description, "synopsis": synopsis, "solution": solution, "cveList": cve_list2,
                         "host": ipaddr, "type": type, "nbns": nbns, "port": port, "os": os, "fqdn": fqdn,
                         "see": see_also2, "plugin": plugin_output, "protocol" : protocol}

                # Append the list based on 'risk_factor'
                if risk_factor == "Critical":
                    critRiskLst.append(risks)
                if risk_factor == "High":
                    highRiskLst.append(risks)
                if risk_factor == "Medium":
                    medRiskLst.append(risks)
                if risk_factor == "Low":
                    lowRiskLst.append(risks)

    # Merge lists by 'risk_factor' with the 'report_items' for a sorted list
    report_items.extend(critRiskLst)
    report_items.extend(highRiskLst)
    report_items.extend(medRiskLst)
    report_items.extend(lowRiskLst)
    critRiskLst = []                # Empty list contents
    highRiskLst = []                # Empty list contents
    medRiskLst = []                 # Empty list contents
    lowRiskLst = []                 # Empty list contents
    cve_list1 = []                  # Empty list contents
    cve_list2 = []                  # Empty list contents

    return report_items

def dir_folder(output_file):
    """
    A function that creates the folder structure based on ArgParse 'output_file' flag and returns the
    'directory' object
    :param: output_file
    :return: directory
    """
    print("{0} Determining Directory Structure".format(info))
    # Create the directory based on "-o" option.  If no input detected, structure created in working directory and
    # return the object 'directory',
    if output_file == None:
        directory = "Parsed/"
    else:
        directory = output_file

    try:
        os.mkdir(directory)
        print("{0} Directory \"{1}\" created ".format(complete, directory))
    except FileExistsError:
        print("{0} Directory \"{1}\" already exists".format(warning, directory))

    return directory

def excel_xls(report_items,directory):
    """
    A Function that creates an Excel Spreadsheet named 'Data.xlsx' and then populates the
    spreadsheet with values from the 'report_items' object.
    :param: report_items
    :param: directory
    :return:
    """
    print ("{0} Creating Spreadsheet in {1}".format(info,directory))
    # Create a Workbook named 'Data.xlsx' and the add a Worksheet
    # Save the output to the current working directory
    wb = xlsxwriter.Workbook(directory + "Data.xlsx")
    #wb = xlsxwriter.Workbook('/Users/<user>/Desktop/Data.xlsx') # Use for troubleshooting
    ws = wb.add_worksheet()

    # Create the spreadsheet headers
    ws.write(0, 0, "IP Address")
    ws.write(0, 1, "Device Type")
    ws.write(0, 2, "NetBios Name")
    ws.write(0, 3, "Host Name")
    ws.write(0, 4, "Operating System")
    ws.write(0, 5, "Rating")
    ws.write(0, 6, "Protocol")
    ws.write(0, 7, "Port")
    ws.write(0, 8, "Name")
    ws.write(0, 9, "Description")
    ws.write(0, 10, "Impact")
    ws.write(0, 11, "Remediation")
    ws.write(0, 12, "See Also")
    ws.write(0, 13, "Plugin Output")
    ws.write(0, 14, "CVE/CWE")

   # Iterate through 'report_items' and map 'value' to a cell number of c(X)
    row = 1
    for value in report_items:
        c0 = value["host"]
        c1 = value["type"]
        c2 = value["nbns"]
        c3 = value["fqdn"]
        c4 = value["os"]
        c5 = value["risk_factor"]
        c6 = value["protocol"]
        c7 = value["port"]
        c8 = value["plugin_name"]
        c9 = value["description"]
        c10 = value["synopsis"]
        c11 = value["solution"]
        c12 = value["see"]
        c13 = value["plugin"]
        c14 = value["cveList"]
        c14 = ''.join(c14)

    # Write the values to row/cell and increment 'row' by 1
        ws.write(row,0,c0)
        ws.write(row,1,c1)
        ws.write(row,2,c2)
        ws.write(row,3,c3)
        ws.write(row,4,c4)
        ws.write(row,5,c5)
        ws.write(row,6,c6)
        ws.write(row,7,c7)
        ws.write(row,8,c8)
        ws.write(row,9,c9)
        ws.write(row,10,c10)
        ws.write(row,11,c11)
        ws.write(row,12,c12)
        ws.write(row,13,c13)
        ws.write(row,14,c14)
        row += 1

    # Close the workbook
    wb.close()

def main():
    """
    The main function that calls functions to open a text file, parse data, manipulate data, and saves the output to a
    file named 'Data.xlsx' to the current working directory or
    specified directory.
    :param:
    :return:
    """
    if args.input_file:
        # Open XML File and parse the data
        # Call the 'parse_file' function, as 'nessus_file', and pass the ArgParse flag of -i
        nessus_file = parse_file(args.input_file.name)

        if nessus_file is not None:
            # Call the 'report_items' function and pass the 'nessus_file' function results
            report_items = get_report_items(nessus_file)
            # Call the 'dir_folder', as directory, and pass the ArgParse flag of -o
            directory = dir_folder(args.output_dir)
            # Call the 'excel_xls' function and pass the 'report_items' and 'directory' objects
            excel_xls(report_items,directory)
            print("{0} Document Parsing Complete".format(complete))
            return
        else:
            print ("{0} Something went wrong!\n".format(error))
            sys.exit(-1)

if __name__ == "__main__":
    # Use ArgParse with mandatory flag of -i
    try:
        parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, \
                                         description="Parse Nessus Pro output to a MS Excel spreadsheet")
        required = parser.add_argument_group("required arguments")
        required.add_argument("-i", "--input", type=argparse.FileType("r"), help="Input file to use ", \
                              dest="input_file", required=True)
        parser.add_argument("-o", "--output", help="Output Directory location ", dest="output_dir", default=None)
        args = parser.parse_args()

        # Call the 'main' function
        main()

    except KeyboardInterrupt:
        print("{0} User Interrupt! Quitting....\n".format(error))
        sys.exit(-1)
    except:
        raise
    exit()
